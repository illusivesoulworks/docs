"use strict";(self.webpackChunkillusivesoulworks_docs=self.webpackChunkillusivesoulworks_docs||[]).push([[4536],{5989:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"diet/diet-suites","title":"Customizing Diet Suites","description":"A tutorial on how to customize suites of food groups and diet effects.","source":"@site/versioned_docs/version-1.20.x/diet/diet-suites.md","sourceDirName":"diet","slug":"/diet/diet-suites","permalink":"/1.20.x/diet/diet-suites","draft":false,"unlisted":false,"editUrl":"https://github.com/illusivesoulworks/docs/edit/main/versioned_docs/version-1.20.x/diet/diet-suites.md","tags":[],"version":"1.20.x","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Categorizing Food to Groups","permalink":"/1.20.x/diet/food-classification"},"next":{"title":"Example Datapack","permalink":"/1.20.x/diet/datapack-example"}}');var s=i(4848),r=i(8453);const o={sidebar_position:4},a="Customizing Diet Suites",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Directory",id:"directory",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Customizing Effects",id:"customizing-effects",level:2},{value:"Attribute Modifiers",id:"attribute-modifiers",level:3},{value:"Fields",id:"fields",level:3},{value:"Status Effects",id:"status-effects",level:2},{value:"Fields",id:"fields-1",level:3},{value:"Conditions",id:"conditions",level:2},{value:"Fields",id:"fields-2",level:3},{value:"Example",id:"example",level:2},{value:"Built-in Diet Suite",id:"built-in-diet-suite",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"customizing-diet-suites",children:"Customizing Diet Suites"})}),"\n",(0,s.jsx)(n.p,{children:"A tutorial on how to customize suites of food groups and diet effects."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Diet suites are a collection of food groups and effects that are applied to the player based on the values of those\nfood groups. A player can only have one existing diet suite at a time, but an instance can have as many diet suites as\nit needs. Suites exist on a per-player basis and players can have a different suite than another."}),"\n",(0,s.jsx)(n.p,{children:"Suites are divided into two major components: food groups and effects. Effects are further divided into three major\ncomponents: status effects, attribute modifiers, and conditions."}),"\n",(0,s.jsx)(n.h2,{id:"directory",children:"Directory"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["The file should be a ",(0,s.jsx)(n.code,{children:".json"})," file located in the ",(0,s.jsx)(n.code,{children:"~/data/(namespace)/diet/suites/"})," folder of the datapack."]}),"\n",(0,s.jsxs)(n.p,{children:["The file name is the ",(0,s.jsx)(n.code,{children:"identifier"})," used for the suite. An ",(0,s.jsx)(n.code,{children:"identifier"})," can be anything that is lowercased with no\nspecial characters. If customizing or replacing the default suite, the file should be named ",(0,s.jsx)(n.code,{children:"builtin.json"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"(namespace)"})," field should be replaced by the namespace chosen for this portion of the datapack. If this is a part\nof a mod, the namespace is usually the mod ID. If this is part of a user-defined datapack, then the namespace can be\nanything that is lowercased with no special characters."]})}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["The structure of the ",(0,s.jsx)(n.code,{children:".json"})," file for the suite configuration consists of a top-level JSON object that holds three\npotential fields."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"replace"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If true, the file will override pre-existing suites of the same name instead of adding the arrays together."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"groups"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["An array of food group ",(0,s.jsx)(n.code,{children:"name"})," entries as defined by ",(0,s.jsx)(n.a,{href:"/1.20.x/diet/diet-groups",children:"Customizing Food Groups"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"effects"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["An array of effects to apply to the player as defined by ",(0,s.jsx)(n.a,{href:"#customizing-effects",children:"Customizing Effects"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"customizing-effects",children:"Customizing Effects"}),"\n",(0,s.jsx)(n.p,{children:"Dietary effects are custom status effects or attribute modifiers applied to players when certain conditions are met.\nEach effect entry is divided into three different components: attribute modifiers, status effects, and conditions.\nEffects can have multiple attribute modifiers, status effects, and conditions tied to a single entry."}),"\n",(0,s.jsx)(n.h3,{id:"attribute-modifiers",children:"Attribute Modifiers"}),"\n",(0,s.jsx)(n.p,{children:"An attribute modifier represents a direct modifier to an entity attribute."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "effects": [\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.movement_speed",\n          "operation": "multiply_base",\n          "amount": 0.25\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"fields",children:"Fields"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"name"})," - ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The namespaced registry name of the entity attribute to apply this entry on."}),"\n",(0,s.jsxs)(n.li,{children:["List of vanilla Minecraft entity attribute names:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Max Health - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.max_health"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Knockback Resistance - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.knockback_resistance"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Movement Speed - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.movement_speed"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Attack Damage - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.attack_damage"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Attack Knockback - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.attack_knockback"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Attack Speed - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.attack_speed"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Armor - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.armor"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Armor Toughness - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.armor_toughness"'})]}),"\n",(0,s.jsxs)(n.li,{children:["Luck - ",(0,s.jsx)(n.code,{children:'"minecraft:generic.luck"'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"operation"})," - ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The type of operation to perform on the entity attribute"}),"\n",(0,s.jsxs)(n.li,{children:["Possible values:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"multiply_total"'})," - Increment the attribute by (value * amount)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"multiply_base"'})," - Increment the attribute by (base * amount)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"add"'})," - Increment the attribute by the amount"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"amount"})," - ",(0,s.jsx)(n.code,{children:"decimal"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The amount to use for the operation on the attribute modifier"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"status-effects",children:"Status Effects"}),"\n",(0,s.jsx)(n.p,{children:"A status effect represents a status effect applied to an entity."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "effects": [\n    {\n      "status_effects": [\n        {\n          "name": "minecraft:hunger",\n          "power": 3\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"fields-1",children:"Fields"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"name"})," - ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The namespaced registry name of the potion effect to apply"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"power"})," - ",(0,s.jsx)(n.code,{children:"integer"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The integer amount representing the strength of the potion effect"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conditions",children:"Conditions"}),"\n",(0,s.jsx)(n.p,{children:"A condition is an entry defining a test that needs to pass in order to activate the corresponding effect. There can be\nmultiple conditions for a single effect, and all conditions must pass in order to activate the effect."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "effects": [\n    {\n      "conditions": [\n        {\n          "groups": ["sugars", "proteins"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"fields-2",children:"Fields"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"groups"})," - ",(0,s.jsx)(n.code,{children:"string[]"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A list of groups that this condition is testing against"}),"\n",(0,s.jsxs)(n.li,{children:["The names correspond to the names given to the groups in the ",(0,s.jsx)(n.code,{children:"diet-groups.toml"})," configuration"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"above"})," - ",(0,s.jsx)(n.code,{children:"decimal"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A decimal value between ",(0,s.jsx)(n.code,{children:"0.0"})," and ",(0,s.jsx)(n.code,{children:"1.0"})," that indicates the lower bound that the value must be at or above"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"below"})," - ",(0,s.jsx)(n.code,{children:"decimal"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A decimal value between ",(0,s.jsx)(n.code,{children:"0.0"})," and ",(0,s.jsx)(n.code,{children:"1.0"})," that indicates the upper bound that the value must be at or below"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"match"})," - ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The match method used for the condition testing"}),"\n",(0,s.jsxs)(n.li,{children:["Possible values:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"all"'})," - Condition passes if all the groups meet the threshold."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"any"'})," - Condition passes if any the groups meet the threshold."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"average"'})," - Condition passes if the average value of the groups meets the threshold."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"none"'})," - Condition passes if none of the groups meet the threshold."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"every"'})," - Condition passes if at least one group meets the threshold. In addition, looks for each group that passes the condition and amplifies the effect's power for each one.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example: If three groups pass an ",(0,s.jsx)(n.code,{children:'"every"'}),' test, then a "Strength I" potion effect becomes "Strength III"']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "replace": false,\n  "groups": [\n    "fruits",\n    "grains",\n    "proteins",\n    "sugars",\n    "vegetables"\n  ],\n  "effects": [\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.max_health",\n          "operation": "add",\n          "amount": 2.0\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["proteins", "fruits", "vegetables", "grains"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    },\n    {\n      "status_effects": [\n        {\n          "name": "minecraft:hunger",\n          "power": 3\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["sugars"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This configuration will grant ",(0,s.jsx)(n.code,{children:"2.0"})," additional ",(0,s.jsx)(n.code,{children:"max_health"})," when ",(0,s.jsx)(n.code,{children:"all"})," the ",(0,s.jsx)(n.code,{children:"proteins"}),", ",(0,s.jsx)(n.code,{children:"vegetables"}),", ",(0,s.jsx)(n.code,{children:"grains"}),", and\n",(0,s.jsx)(n.code,{children:"fruits"})," food groups are above 80% (",(0,s.jsx)(n.code,{children:"0.8"}),") and below or equal to 100% (",(0,s.jsx)(n.code,{children:"1.0"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition, there is an additional effect that grants ",(0,s.jsx)(n.code,{children:"hunger"})," at power ",(0,s.jsx)(n.code,{children:"3"})," when ",(0,s.jsx)(n.code,{children:"sugars"})," is above 80% (",(0,s.jsx)(n.code,{children:"0.8"}),") and\nbelow or equal to 100% (",(0,s.jsx)(n.code,{children:"1.0"}),")."]}),"\n",(0,s.jsx)(n.h2,{id:"built-in-diet-suite",children:"Built-in Diet Suite"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["This is the built-in diet suite that is configured by default, aptly named ",(0,s.jsx)(n.code,{children:"builtin"}),"."]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"builtin.json"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "replace": false,\n  "groups": [\n    "fruits",\n    "grains",\n    "proteins",\n    "sugars",\n    "vegetables"\n  ],\n  "effects": [\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.max_health",\n          "operation": "add",\n          "amount": 2.0\n        },\n        {\n          "name": "minecraft:generic.attack_damage",\n          "operation": "add",\n          "amount": 2.0\n        },\n        {\n          "name": "minecraft:generic.attack_speed",\n          "operation": "multiply_total",\n          "amount": 0.1\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["proteins", "fruits", "vegetables", "grains"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    },\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.max_health",\n          "operation": "add",\n          "amount": 2.0\n        },\n        {\n          "name": "minecraft:generic.knockback_resistance",\n          "operation": "add",\n          "amount": 0.10\n        },\n        {\n          "name": "minecraft:generic.armor_toughness",\n          "operation": "add",\n          "amount": 1.0\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["proteins", "fruits", "vegetables", "grains"],\n          "match": "every",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    },\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.movement_speed",\n          "operation": "multiply_base",\n          "amount": 0.25\n        }\n      ],\n      "status_effects": [\n        {\n          "name": "minecraft:hunger",\n          "power": 3\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["sugars"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    }\n  ]\n}\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);